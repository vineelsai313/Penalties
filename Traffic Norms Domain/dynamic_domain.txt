% --------------------------
% Objects and their types
% --------------------------
location(1..14).

speed(0;15;25;35;45;55;65;85).

color(green).
color(red).
color(yellow).
sign(stop).
sign(do_not_enter).

% --------------------------
% Values of Statics
% -------------------------

holds(intersection(X, Y)) :- holds(intersection(Y, X)).
holds(connected(X, Y)) :- holds(intersection(X, Y)).
holds(connected(X, Y)) :- holds(connected(Y, X)).

-holds(connected(L1, L2)) :- not holds(connected(L1, L2)), location(L1), location(L2).

holds(speed_limit(X, Y, Z)) :- holds(speed_limit(Y, X, Z)).


holds(intersection(1,3)).
holds(intersection(2,7)).
holds(intersection(7,9)).
holds(intersection(10,13)).
holds(intersection(12,14)).
holds(intersection(8,11)).
holds(intersection(6,8)).
holds(intersection(4,5)).
holds(intersection(2,9)).
holds(intersection(6,11)).

holds(connected(1,2)).
holds(connected(3,4)).
holds(connected(5,6)).
holds(connected(7,8)).
holds(connected(9,10)).
holds(connected(11,12)).
holds(connected(13,14)).

holds(speed_limit(1, 2, 45)).
holds(speed_limit(9, 10, 25)).
holds(speed_limit(13, 14, 25)).
holds(speed_limit(12, 11, 65)).
holds(speed_limit(6, 5, 25)).
holds(speed_limit(4, 3, 65)).
holds(speed_limit(7, 8, 45)).

holds(speed_limit(X, Y, 15)) :- holds(intersection(X, Y)).

holds(is_sign(do_not_enter, 11, 8)).
holds(is_sign(do_not_enter, 6, 8)).

% Physically, the stop sign is at 10, but the agent should stop at 10 before going to 13
holds(is_sign(stop, 10, 13)).

% --------------------------
% Fluents
% --------------------------
fluent(inertial, has_speed(S)) :- speed(S).
fluent(inertial, at_loc(L)) :- location(L).

fluent(defined, school_bus_is_stopped(L1, L2)) :- location(L1), location(L2).
fluent(defined, pedestrians_are_crossing(L)) :- location(L).
fluent(defined, light_color(C, L1, L2)) :- color(C), location(L1), location(L2).

fluent(F) :- fluent(inertial, F).
fluent(F) :- fluent(defined, F).

% --------------------------
% Actions
% --------------------------

action(drive(L1, L2, S)) :- location(L1), location(L2), L1!=L2, speed(S), S > 0.
action(stop(L)) :- location(L).

% --------------------------
% Axioms
% --------------------------

% Dynamic causal laws: direct effects of actions

%if an agent is driving to a specific destination it should be at the end.
holds(at_loc(L2), J) :- occurs(drive(L1, L2, S), I),
                        next(I, J),
                        I < n.
%drive changes the has_speed
holds(has_speed(S), J) :- occurs(drive(L1, L2, S), I), 
                          next(I, J),
                          I < n.
%stop changes the has_speed to 0
holds(has_speed(0),J) :- occurs(stop(L),I),
                         next(I, J),
                         I < n.


% State constraints
%If an agent is at a specific location it cannot be at any other location.
-holds(at_loc(L1), I) :- holds(at_loc(L2), I),
                         location(L1),
                         L1 != L2.
%has_speed should be unique
-holds(has_speed(S), I) :- holds(has_speed(S1), I), 
                           speed(S),
                           S != S1.

% Executability conditions
%it is impossible to drive from a to b if the agent is not located at a
-occurs(drive(L1, L2, S), I) :-  -holds(at_loc(L1), I), 
                                 speed(S),
                                 location(L2).
           

% an agent cannot go from point a to b if a and b are not connected
% Note: connected is a static, that is why it does not have the time step I
-occurs(drive(L1, L2, S), I) :- -holds(connected(L1, L2)), 
                                speed(S),
                                step(I).
                                                  
-occurs(stop(L), I) :- -holds(at_loc(L), I).

% Note: intersection is a static, that is why it does not have the time step I
-occurs(drive(L1, L2, S), I) :- holds(intersection(L1, L2)),
                                speed(S),
                                S > 50,
                                step(I).

%% GENERAL INERTIA AXIOMS FOR INERTIAL FLUENTS:

holds(F,I1) :- fluent(inertial,F),
	holds(F,I),                  
	not -holds(F,I1),
	I < n,
	next(I, I1).

-holds(F,I1) :- fluent(inertial,F),
	-holds(F,I),                
	not holds(F,I1),
	I < n,
	next(I, I1).

% GENERAL CWA FOR DEFINED FLUENTS
-holds(F, I) :- fluent(defined, F),
	not holds(F, I),
	step(I).                

% --------------------------
% A particular story: 
%      Initially, ... 
%      These actions happened ...
% i.e., Initial situation and actions that occurred
% --------------------------

#const n=6.% change the number
step(0..n).

% ===============

next(I, I1) :- step(I), step(I1), I1 = I+1.

% Initial situation: what holds at time step 0
% in the test1scenario1.txt file

% CWA for time step 0
-holds(F, 0) :- fluent(inertial, F), not holds(F, 0).

% Defined fluent
% In the scenario files

% ===============================================
% Planning Module
% ===============================================

% Modify the rule below according to the goal
% of your particular problem:

success :- goal(I), 
           I <= n.

:- not success.

0 {occurs(A, I) : action(A)} 1 :- step(I),
                                  not goal(I),
                                  I < n.
%:~ occurs(stop(L), I). [1, n-I]
#maximize{I : occurs(stop(L), I)}.
%:~ occurs(A, I). [1, A, I]

something_happened(I) :- occurs(A, I).

:- step(J), 
   goal(I), 
   not goal(I0),
   I0 = I-1,
   J < I, 
   not something_happened(J).

% Heuristics
% Note: intersection is a static, that is why we do not need the time step I or J
% Do not drive through the same intersection in consecutive steps
% because that would require to drive backwards
:- occurs(drive(L1, L2, _), I),
   occurs(drive(L2, L3, _), J),
   next(I, J),
   holds(intersection(L1, L2)),
   holds(intersection(L2, L3)).

% Do not drive through the straight segments in consecutive steps
% because that would require to drive backwards
:- occurs(drive(L1, L2, _), I),
   occurs(drive(L2, L3, _), J),
   next(I, J),
   not holds(intersection(L1, L2)),
   not holds(intersection(L2, L3)).
   
#show occurs/2.
%#show holds/2.
%#show -holds/2.

%#show something_happened/1.